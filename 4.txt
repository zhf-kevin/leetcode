class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int i = 0;
        int j = 0;
        int visit_num = 0;
        int last_num = INT_MIN;
        while(i < nums1.size() && j < nums2.size())
        {
            if(visit_num == (nums1.size() + nums2.size()) / 2)
            {
                if((nums1.size() + nums2.size()) % 2 == 1)
                {
                    if(nums1[i] < nums2[j])
                        return nums1[i];
                    else
                        return nums2[j];
                }
                else
                {
                    if(nums1[i] < nums2[j])
                        return 1.0 * (last_num + nums1[i]) / 2;
                    else
                        return 1.0 * (last_num + nums2[j]) / 2;
                }
                
            }
            if(nums1[i] < nums2[j])
            {
                last_num = nums1[i];
                i++;
            }
            else
            {
                last_num = nums2[j];
                j++;
            }
            visit_num++;
        }
        while(i < nums1.size())
        {
            if(visit_num == (nums1.size() + nums2.size()) / 2)
            {
                if((nums1.size() + nums2.size()) % 2 == 1)
                    return nums1[i];
                else
                    return 1.0 * (last_num + nums1[i]) / 2;
            }
            last_num = nums1[i];
            i++;
            visit_num++;
        }
        while(j < nums2.size())
        {
            if(visit_num == (nums1.size() + nums2.size()) / 2)
            {
                if((nums1.size() + nums2.size()) % 2 == 1)
                    return nums2[j];
                else
                    return 1.0 * (last_num + nums2[j]) / 2;
            }
            last_num = nums2[j];
            j++;
            visit_num++;
        }
    }
};